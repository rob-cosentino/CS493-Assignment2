from flask import Flask, request, jsonify, abort
from google.cloud import datastore

BUSINESSES = 'businesses'

app = Flask(__name__)
datastore_client = datastore.Client()

@app.route('/')
def index():
    return 'Hello world!'

# -----------------------------------------------------------------------------------------------
# CREATE new business
# -----------------------------------------------------------------------------------------------
@app.route('/' + BUSINESSES, methods=['POST'])
def create_business():
    # Parsing incoming JSON data
    business_data = request.get_json()

    # Defining the required fields 
    required_fields = ['owner_id', 'name', 'street_address', 'city', 'state', 'zip_code']

    # Checking if the request is missing any required fields
    if not all(field in business_data for field in required_fields):
        return jsonify(error="Request Missing at least one or more required field attributes"), 400
    
    # Creating a new business entity for datastore
    new_business = datastore.Entity(key=datastore_client.key('Business'))
    new_business.update(business_data)

    # Saving the new business entity to datastore
    datastore_client.put(new_business)

    # Returning the newly created business entity as JSON object with autogenerated ID
    business_data['id'] = new_business.id
    return jsonify(business_data), 201

# -----------------------------------------------------------------------------------------------
# GET business by ID
# -----------------------------------------------------------------------------------------------
@app.route('/' + BUSINESSES + '/<business_id>', methods=['GET'])
def get_business(business_id):
    try:
        business_id = int(business_id)
    except ValueError:
        return jsonify(error="Invalid Business ID"), 400
    
    # Fetching the business entity from datastore
    key = datastore_client.key('Business', business_id)
    business = datastore_client.get(key)

    # Checking if the business entity exists
    if not business:
        return jsonify(error="Business Not in Database"), 404
    
    business_data = dict(business)
    business_data['id'] = business.id
    return jsonify(business_data), 200


# -----------------------------------------------------------------------------------------------
# GET all businesses
# -----------------------------------------------------------------------------------------------
@app.route('/' + BUSINESSES, methods=['GET'])
def get_all_businesses():
    # Query creation for selecting all Datastore businesses 
    query = datastore_client.query(kind='Business')
    results = list(query.fetch())

    # Conversion of Datastore business entities to dictionaries
    businesses = []
    for business in results:
        business_data = dict(business)
        business_data['id'] = business.id
        businesses.append(business_data)

    # Returning businesses list as JSON
    return jsonify(businesses), 200


# -----------------------------------------------------------------------------------------------
# GET businesses by Owner
# -----------------------------------------------------------------------------------------------
@app.route('/owners/<owner_id>/businesses', methods=['GET'])
def get_businesses_by_owner(owner_id):

    # owner id is converted and checked
    try:
        owner_id = int(owner_id)
    except ValueError:
        return jsonify(error="Invalid Owner ID"), 400
    
    # Query to fetch all businesses owned by the owner_id
    query = datastore_client.query(kind='Business')
    query.add_filter('owner_id', '=', owner_id)
    businesses = list(query.fetch())

    # Conversion of Datastore entities to dictionaries
    businesses = []
    for business in businesses:
        business_data = dict(business)
        business_data['id'] = business.id
        businesses.append(business_data)

    return jsonify(businesses), 200




# -----------------------------------------------------------------------------------------------
# EDIT a business
# -----------------------------------------------------------------------------------------------
@app.route('/' + BUSINESSES + '/<business_id>', methods=['PUT'])
def edit_business(business_id):
    # Parse JSON data
    business_data = request.get_json()

    # Define the required fields
    required_fields = ['owner_id', 'name', 'street_address', 'city', 'state', 'zip_code']

    # Check if the request is missing any required fields
    if not all(field in business_data for field in required_fields):
        return jsonify(error="Request Missing at least one or more required field attributes"), 400

    # Converting id into int if possible
    try:
        business_id = int(business_id)
    except ValueError:
        return jsonify(error="Invalid Business ID"), 400
    
    # Fetch the business entity from Datastore
    key = datastore_client.key('Business', business_id)
    business = datastore_client.get(key)

    # Check if business exists:
    if not business:
        return jsonify(error="Business Not in Database"), 404
    
    # Updating entity with newly acquired data 
    business.update(business_data)

    # Saving updated entity in Datastore
    datastore_client.put(business)

    # Updated business entity as JSON object
    business_data['id'] = business_id
    return jsonify(business_data), 200


# -----------------------------------------------------------------------------------------------
# DELETE a business
# -----------------------------------------------------------------------------------------------
@app.route('/' + BUSINESSES + '/<business_id>', methods=['DELETE'])
def delete_business(business_id):

    # business id is checked as int
    try:
        business_id = int(business_id)
    except ValueError:
        return jsonify(error="Invalid business ID"), 404
    
    # Retrieivng business entity from Datastore to be deleted
    business_key = datastore_client.key('Business', business_id)
    business = datastore_client.get(business_key)

    # check if business exists
    if not business:
        return jsonify(error="No business with this ID exists in the Database"), 404
    
    # Query to delete all reviews associated with the business
    query = datastore_client.query(kind='Review')
    query.add_filter('business_id', '=', business_id)
    reviews = list(query.fetch())

    # Actual review deletion
    for review in reviews:
        datastore_client.delete(review.key)

    # Business entity deletion
    datastore_client.delete(business_key)
    return '', 204



# -----------------------------------------------------------------------------------------------
# CREATE a Review
# -----------------------------------------------------------------------------------------------
@app.route('/reviews', methods=['POST'])
def create_review():
    review_data = request.get_json()

    # Required fields for a Review entity
    required_fields = ['user_id', 'business_id', 'stars']

    # Check if all required fields are provided
    if not all(field in review_data for field in required_fields):
        return jsonify(error="The request is missing one or more of the required attributes"), 400

    # Check if the business exists
    business_key = datastore_client.key('Business', review_data['business_id'])
    if not datastore_client.get(business_key):
        return jsonify(error="The business does not exist"), 404

    # Check for an existing review
    query = datastore_client.query(kind='Review')
    query.add_filter('user_id', '=', review_data['user_id'])
    query.add_filter('business_id', '=', review_data['business_id'])
    existing_reviews = list(query.fetch())

    if existing_reviews:
        return jsonify(error="Review already exists for this user and business"), 409

    # Since no review exists, create a new one with an auto-generated ID
    new_review = datastore.Entity(key=datastore_client.key('Review'))
    new_review.update(review_data)

    # Save the new review entity to the Datastore
    datastore_client.put(new_review)

    # Return the new review data with a 201 Created status
    review_data['id'] = new_review.key.id
    return jsonify(review_data), 201


# -----------------------------------------------------------------------------------------------
# GET a Review
# -----------------------------------------------------------------------------------------------
@app.route('/reviews/<review_id>', methods=['GET'])
def get_review(review_id):
    try:
        review_id = int(review_id)
    except ValueError:
        return jsonify(error="Review ID Not Valid"), 400
    
    # Retrieving Review entity from Datastore
    review_key = datastore_client.key('Review', review_id)
    review = datastore_client.get(review_key)

    # Check if the review exists
    if not review:
        return jsonify(error="No review with this review_id exists"), 404
    
    # Converting Datastore entity to dictionary to return as JSON
    review_data = dict(review)
    review_data['id'] = review.key.id
    return jsonify(review_data), 200


# -----------------------------------------------------------------------------------------------
# EDIT a Review
# -----------------------------------------------------------------------------------------------
@app.route('/reviews/<review_id>', methods=['PUT'])
def edit_review(review_id):
    try:
        review_id = int(review_id)
    except ValueError:
        return jsonify(error="Review ID Not Valid"), 400
    
    review_updates = request.get_json()

    if 'stars' not in review_updates:
        return jsonify(error="Request Missing 'stars' attribute"), 400
    
    review_key = datastore_client.key('Review', review_id)
    review = datastore_client.get(review_key)

    if not review:
        return jsonify(error="No review with this ID exists"), 404
    
    review.update(review_updates)

    datastore_client.put(review)

    review_data = dict(review)
    review_data['id'] = review_id
    return jsonify(review_data), 200


# -----------------------------------------------------------------------------------------------
# DELETE a Review
# -----------------------------------------------------------------------------------------------
@app.route('/reviews/<review_id>', methods=['DELETE'])
def delete_review(review_id):

    try:
        review_id = int(review_id)
    except ValueError:
        return jsonify(error="No Review with provided ID exists"), 404
    
    # Creating Review Key
    review_key = datastore_client.key('Review', review_id)

    # Retrieving review from Datastore to check if it exists
    review = datastore_client.get(review_key)

    if not review:
        return jsonify(error="No Review with provided ID exists"), 404
    
    datastore_client.delete(review_key)

    return '', 204



# -----------------------------------------------------------------------------------------------
# GET Reviews by User
# -----------------------------------------------------------------------------------------------
@app.route('/users/<user_id>/reviews', methods=['GET'])
def list_reviews_for_user(user_id):
    try:
        user_id = int(user_id)
    except ValueError:
        return jsonify(error="Invalid User ID format"), 400
    

    # Datastore Query to select al reviews of specified user
    query = datastore_client.query(kind='Review')
    query.add_filter('user_id', '=', user_id)
    results = list(query.fetch())

    # Datastore entities converted to dictionaries for JSON
    reviews = []
    for review in results:
        review_data = dict(review)
        review_data['id'] = review.key.id
        reviews.append(review_data)

    return jsonify(reviews), 200




if __name__ == '__main__':
    app.run(host='127.0.0.1', port=8080, debug=True)